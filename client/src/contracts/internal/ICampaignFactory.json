{
  "contractName": "ICampaignFactory",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fundingGoal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadlineDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICampaign.Info",
          "name": "infoData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minimumContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stockLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nbContributors",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStockLimited",
              "type": "bool"
            }
          ],
          "internalType": "struct ICampaign.Rewards[]",
          "name": "rewardsData",
          "type": "tuple[]"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteCampaign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedCampaignsList",
      "outputs": [
        {
          "internalType": "contract ICampaign[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fundingGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineDate\",\"type\":\"uint256\"}],\"internalType\":\"struct ICampaign.Info\",\"name\":\"infoData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stockLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbContributors\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStockLimited\",\"type\":\"bool\"}],\"internalType\":\"struct ICampaign.Rewards[]\",\"name\":\"rewardsData\",\"type\":\"tuple[]\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteCampaign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedCampaignsList\",\"outputs\":[{\"internalType\":\"contract ICampaign[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the CampaignFactory contract\",\"kind\":\"dev\",\"methods\":{\"createCampaign((string,string,uint256,uint256),(string,string,uint256,uint256,uint256,uint256,bool)[])\":{\"params\":{\"infoData\":\"ICampaign.Info basic information for a campaign following the Campaign Info structure\",\"rewardsData\":\"ICampaign.Rewards array of rewards information for a campaign following the Campaign Info structure\"}},\"deleteCampaign()\":{\"details\":\"Only an contract already deployed must be able to call this function\",\"returns\":{\"_0\":\"success bool\"}},\"getDeployedCampaignsList()\":{\"returns\":{\"_0\":\"Campaigns ICampaign[] list of campaigns address deployed and still actives\"}},\"updateOwner(address)\":{\"details\":\"Only the actual owner must be able to call this function\",\"params\":{\"newOwner\":\"address The new owner address\"}}},\"title\":\"ICampaignFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCampaign((string,string,uint256,uint256),(string,string,uint256,uint256,uint256,uint256,bool)[])\":{\"notice\":\"Create a new Campaign contract and init it\"},\"deleteCampaign()\":{\"notice\":\"Delete a new Campaign that call this function.\"},\"getDeployedCampaignsList()\":{\"notice\":\"Allow to get the all list of campaign address deployed\"},\"updateOwner(address)\":{\"notice\":\"Allow the owner to set a new owner for the factory.\"}},\"notice\":\"The Campaign factory facilitate the deployment of new campaigns\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/ICampaignFactory.sol\":\"ICampaignFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/interfaces/ICampaign.sol\":{\"keccak256\":\"0xe83b4a1ee92d979349ff12eb9777ee2a7cabf415d0128624e0adbf778852ca43\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b874239db0828d5802bb0cd9440c9f8eb94c30670882be1c13f6b7369b5c4e19\",\"dweb:/ipfs/QmRbiz2djQGQm2L6485Qisk9BFiNE1kxmqrLCatHXFL9DB\"]},\"project:/contracts/interfaces/ICampaignFactory.sol\":{\"keccak256\":\"0x3c4c9080ee7a9c83100388e68c6012f3bb9339467952a68b39e2d1352d71f1fe\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://c668b3de8f0bfe94faff7ebee8a5e087df062fb4e0ecf57604ae4e74913baa72\",\"dweb:/ipfs/QmZP6ogVRVfJpPkjca7Ccc6rJ5xuJWcon7LjrvV3AqVcH5\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.6;\r\n\r\nimport \"../interfaces/ICampaign.sol\";\r\n\r\n/**\r\n* @title ICampaignFactory\r\n* @notice The Campaign factory facilitate the deployment of new campaigns\r\n* @dev Interface for the CampaignFactory contract\r\n*/\r\ninterface ICampaignFactory {\r\n\r\n    /**\r\n     * @notice Create a new Campaign contract and init it\r\n     * @param infoData ICampaign.Info basic information for a campaign following the Campaign Info structure\r\n     * @param rewardsData ICampaign.Rewards array of rewards information for a campaign following the Campaign Info structure\r\n     */\r\n    function createCampaign(ICampaign.Info memory infoData,ICampaign.Rewards[] memory rewardsData) external;\r\n\r\n    /**\r\n     * @notice Delete a new Campaign that call this function.\r\n     * @dev Only an contract already deployed must be able to call this function\r\n     * @return success bool\r\n     */\r\n    function deleteCampaign() external returns(bool);\r\n\r\n    /**\r\n     * @notice Allow the owner to set a new owner for the factory.\r\n     * @dev Only the actual owner must be able to call this function\r\n     * @param newOwner address The new owner address\r\n     */\r\n    function updateOwner(address newOwner) external;\r\n\r\n    /**\r\n     * @notice Allow to get the all list of campaign address deployed\r\n     * @return Campaigns ICampaign[] list of campaigns address deployed and still actives\r\n     */\r\n    function getDeployedCampaignsList() external view returns (ICampaign[] memory);\r\n}\r\n",
  "sourcePath": "/Users/Xutyr/Documents/Lab/SparkUp/contracts/interfaces/ICampaignFactory.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/ICampaignFactory.sol",
    "exportedSymbols": {
      "ICampaign": [
        2842
      ],
      "ICampaignFactory": [
        2878
      ]
    },
    "id": 2879,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2844,
        "literals": [
          "solidity",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:22:12"
      },
      {
        "absolutePath": "project:/contracts/interfaces/ICampaign.sol",
        "file": "../interfaces/ICampaign.sol",
        "id": 2845,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2879,
        "sourceUnit": 2843,
        "src": "63:37:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 2846,
          "nodeType": "StructuredDocumentation",
          "src": "104:160:12",
          "text": " @title ICampaignFactory\n @notice The Campaign factory facilitate the deployment of new campaigns\n @dev Interface for the CampaignFactory contract"
        },
        "fullyImplemented": false,
        "id": 2878,
        "linearizedBaseContracts": [
          2878
        ],
        "name": "ICampaignFactory",
        "nameLocation": "276:16:12",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 2847,
              "nodeType": "StructuredDocumentation",
              "src": "302:308:12",
              "text": " @notice Create a new Campaign contract and init it\n @param infoData ICampaign.Info basic information for a campaign following the Campaign Info structure\n @param rewardsData ICampaign.Rewards array of rewards information for a campaign following the Campaign Info structure"
            },
            "functionSelector": "a6e1a41a",
            "id": 2857,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createCampaign",
            "nameLocation": "625:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2855,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2850,
                  "mutability": "mutable",
                  "name": "infoData",
                  "nameLocation": "662:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "640:30:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Info_$2759_memory_ptr",
                    "typeString": "struct ICampaign.Info"
                  },
                  "typeName": {
                    "id": 2849,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2848,
                      "name": "ICampaign.Info",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2759,
                      "src": "640:14:12"
                    },
                    "referencedDeclaration": 2759,
                    "src": "640:14:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Info_$2759_storage_ptr",
                      "typeString": "struct ICampaign.Info"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2854,
                  "mutability": "mutable",
                  "name": "rewardsData",
                  "nameLocation": "698:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "671:38:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Rewards_$2750_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct ICampaign.Rewards[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2852,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 2851,
                        "name": "ICampaign.Rewards",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2750,
                        "src": "671:17:12"
                      },
                      "referencedDeclaration": 2750,
                      "src": "671:17:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Rewards_$2750_storage_ptr",
                        "typeString": "struct ICampaign.Rewards"
                      }
                    },
                    "id": 2853,
                    "nodeType": "ArrayTypeName",
                    "src": "671:19:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Rewards_$2750_storage_$dyn_storage_ptr",
                      "typeString": "struct ICampaign.Rewards[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "639:71:12"
            },
            "returnParameters": {
              "id": 2856,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "719:0:12"
            },
            "scope": 2878,
            "src": "616:104:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 2858,
              "nodeType": "StructuredDocumentation",
              "src": "728:186:12",
              "text": " @notice Delete a new Campaign that call this function.\n @dev Only an contract already deployed must be able to call this function\n @return success bool"
            },
            "functionSelector": "244c3c2c",
            "id": 2863,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deleteCampaign",
            "nameLocation": "929:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2859,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "943:2:12"
            },
            "returnParameters": {
              "id": 2862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2861,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2863,
                  "src": "963:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2860,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "963:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "962:6:12"
            },
            "scope": 2878,
            "src": "920:49:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 2864,
              "nodeType": "StructuredDocumentation",
              "src": "977:204:12",
              "text": " @notice Allow the owner to set a new owner for the factory.\n @dev Only the actual owner must be able to call this function\n @param newOwner address The new owner address"
            },
            "functionSelector": "880cdc31",
            "id": 2869,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateOwner",
            "nameLocation": "1196:11:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2866,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "1216:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 2869,
                  "src": "1208:16:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2865,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1208:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1207:18:12"
            },
            "returnParameters": {
              "id": 2868,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1234:0:12"
            },
            "scope": 2878,
            "src": "1187:48:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 2870,
              "nodeType": "StructuredDocumentation",
              "src": "1243:174:12",
              "text": " @notice Allow to get the all list of campaign address deployed\n @return Campaigns ICampaign[] list of campaigns address deployed and still actives"
            },
            "functionSelector": "bfbaebb7",
            "id": 2877,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDeployedCampaignsList",
            "nameLocation": "1432:24:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2871,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1456:2:12"
            },
            "returnParameters": {
              "id": 2876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2875,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2877,
                  "src": "1482:18:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_ICampaign_$2842_$dyn_memory_ptr",
                    "typeString": "contract ICampaign[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2873,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 2872,
                        "name": "ICampaign",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2842,
                        "src": "1482:9:12"
                      },
                      "referencedDeclaration": 2842,
                      "src": "1482:9:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICampaign_$2842",
                        "typeString": "contract ICampaign"
                      }
                    },
                    "id": 2874,
                    "nodeType": "ArrayTypeName",
                    "src": "1482:11:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_ICampaign_$2842_$dyn_storage_ptr",
                      "typeString": "contract ICampaign[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1481:20:12"
            },
            "scope": 2878,
            "src": "1423:79:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2879,
        "src": "266:1239:12",
        "usedErrors": []
      }
    ],
    "src": "37:1470:12"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/interfaces/ICampaignFactory.sol",
    "exportedSymbols": {
      "ICampaign": [
        2842
      ],
      "ICampaignFactory": [
        2878
      ]
    },
    "id": 2879,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2844,
        "literals": [
          "solidity",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:22:12"
      },
      {
        "absolutePath": "project:/contracts/interfaces/ICampaign.sol",
        "file": "../interfaces/ICampaign.sol",
        "id": 2845,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2879,
        "sourceUnit": 2843,
        "src": "63:37:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 2846,
          "nodeType": "StructuredDocumentation",
          "src": "104:160:12",
          "text": " @title ICampaignFactory\n @notice The Campaign factory facilitate the deployment of new campaigns\n @dev Interface for the CampaignFactory contract"
        },
        "fullyImplemented": false,
        "id": 2878,
        "linearizedBaseContracts": [
          2878
        ],
        "name": "ICampaignFactory",
        "nameLocation": "276:16:12",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 2847,
              "nodeType": "StructuredDocumentation",
              "src": "302:308:12",
              "text": " @notice Create a new Campaign contract and init it\n @param infoData ICampaign.Info basic information for a campaign following the Campaign Info structure\n @param rewardsData ICampaign.Rewards array of rewards information for a campaign following the Campaign Info structure"
            },
            "functionSelector": "a6e1a41a",
            "id": 2857,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createCampaign",
            "nameLocation": "625:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2855,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2850,
                  "mutability": "mutable",
                  "name": "infoData",
                  "nameLocation": "662:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "640:30:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Info_$2759_memory_ptr",
                    "typeString": "struct ICampaign.Info"
                  },
                  "typeName": {
                    "id": 2849,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2848,
                      "name": "ICampaign.Info",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2759,
                      "src": "640:14:12"
                    },
                    "referencedDeclaration": 2759,
                    "src": "640:14:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Info_$2759_storage_ptr",
                      "typeString": "struct ICampaign.Info"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2854,
                  "mutability": "mutable",
                  "name": "rewardsData",
                  "nameLocation": "698:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "671:38:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Rewards_$2750_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct ICampaign.Rewards[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2852,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 2851,
                        "name": "ICampaign.Rewards",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2750,
                        "src": "671:17:12"
                      },
                      "referencedDeclaration": 2750,
                      "src": "671:17:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Rewards_$2750_storage_ptr",
                        "typeString": "struct ICampaign.Rewards"
                      }
                    },
                    "id": 2853,
                    "nodeType": "ArrayTypeName",
                    "src": "671:19:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Rewards_$2750_storage_$dyn_storage_ptr",
                      "typeString": "struct ICampaign.Rewards[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "639:71:12"
            },
            "returnParameters": {
              "id": 2856,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "719:0:12"
            },
            "scope": 2878,
            "src": "616:104:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 2858,
              "nodeType": "StructuredDocumentation",
              "src": "728:186:12",
              "text": " @notice Delete a new Campaign that call this function.\n @dev Only an contract already deployed must be able to call this function\n @return success bool"
            },
            "functionSelector": "244c3c2c",
            "id": 2863,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deleteCampaign",
            "nameLocation": "929:14:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2859,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "943:2:12"
            },
            "returnParameters": {
              "id": 2862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2861,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2863,
                  "src": "963:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2860,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "963:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "962:6:12"
            },
            "scope": 2878,
            "src": "920:49:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 2864,
              "nodeType": "StructuredDocumentation",
              "src": "977:204:12",
              "text": " @notice Allow the owner to set a new owner for the factory.\n @dev Only the actual owner must be able to call this function\n @param newOwner address The new owner address"
            },
            "functionSelector": "880cdc31",
            "id": 2869,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateOwner",
            "nameLocation": "1196:11:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2866,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "1216:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 2869,
                  "src": "1208:16:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2865,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1208:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1207:18:12"
            },
            "returnParameters": {
              "id": 2868,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1234:0:12"
            },
            "scope": 2878,
            "src": "1187:48:12",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 2870,
              "nodeType": "StructuredDocumentation",
              "src": "1243:174:12",
              "text": " @notice Allow to get the all list of campaign address deployed\n @return Campaigns ICampaign[] list of campaigns address deployed and still actives"
            },
            "functionSelector": "bfbaebb7",
            "id": 2877,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDeployedCampaignsList",
            "nameLocation": "1432:24:12",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2871,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1456:2:12"
            },
            "returnParameters": {
              "id": 2876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2875,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2877,
                  "src": "1482:18:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_ICampaign_$2842_$dyn_memory_ptr",
                    "typeString": "contract ICampaign[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2873,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 2872,
                        "name": "ICampaign",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2842,
                        "src": "1482:9:12"
                      },
                      "referencedDeclaration": 2842,
                      "src": "1482:9:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICampaign_$2842",
                        "typeString": "contract ICampaign"
                      }
                    },
                    "id": 2874,
                    "nodeType": "ArrayTypeName",
                    "src": "1482:11:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_ICampaign_$2842_$dyn_storage_ptr",
                      "typeString": "contract ICampaign[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1481:20:12"
            },
            "scope": 2878,
            "src": "1423:79:12",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2879,
        "src": "266:1239:12",
        "usedErrors": []
      }
    ],
    "src": "37:1470:12"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.6+commit.11564f7e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-07-30T15:53:22.346Z",
  "devdoc": {
    "details": "Interface for the CampaignFactory contract",
    "kind": "dev",
    "methods": {
      "createCampaign((string,string,uint256,uint256),(string,string,uint256,uint256,uint256,uint256,bool)[])": {
        "params": {
          "infoData": "ICampaign.Info basic information for a campaign following the Campaign Info structure",
          "rewardsData": "ICampaign.Rewards array of rewards information for a campaign following the Campaign Info structure"
        }
      },
      "deleteCampaign()": {
        "details": "Only an contract already deployed must be able to call this function",
        "returns": {
          "_0": "success bool"
        }
      },
      "getDeployedCampaignsList()": {
        "returns": {
          "_0": "Campaigns ICampaign[] list of campaigns address deployed and still actives"
        }
      },
      "updateOwner(address)": {
        "details": "Only the actual owner must be able to call this function",
        "params": {
          "newOwner": "address The new owner address"
        }
      }
    },
    "title": "ICampaignFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCampaign((string,string,uint256,uint256),(string,string,uint256,uint256,uint256,uint256,bool)[])": {
        "notice": "Create a new Campaign contract and init it"
      },
      "deleteCampaign()": {
        "notice": "Delete a new Campaign that call this function."
      },
      "getDeployedCampaignsList()": {
        "notice": "Allow to get the all list of campaign address deployed"
      },
      "updateOwner(address)": {
        "notice": "Allow the owner to set a new owner for the factory."
      }
    },
    "notice": "The Campaign factory facilitate the deployment of new campaigns",
    "version": 1
  }
}